# üß† **Investigaci√≥n: Git Commit y Conventional Commits**

---

## üè∑Ô∏è **Definici√≥n general**

Un **git commit** es una **instant√°nea (snapshot)** del estado actual de un proyecto.  
Cada commit registra los cambios realizados en el c√≥digo, junto con un **mensaje descriptivo** que explica qu√© se modific√≥ y por qu√©.

> üì∏ En palabras simples: un *commit* es como sacar una foto del progreso de tu proyecto para poder volver a ese punto m√°s adelante.

---

## ‚öôÔ∏è **C√≥mo funciona un commit**

1. Realizas modificaciones en uno o m√°s archivos de tu proyecto.  
2. Preparas los archivos para guardar con:
   ```bash
   git add .
---

# üß∞ **Comandos m√°s utilizados en Git**

Git ofrece una gran variedad de comandos, pero algunos son esenciales para el trabajo diario.  
A continuaci√≥n se resumen los m√°s usados, clasificados por categor√≠a y con ejemplos pr√°cticos.

---

## üì¶ **Inicializaci√≥n y configuraci√≥n**

| Comando | Descripci√≥n | Ejemplo |
|----------|--------------|---------|
| `git init` | Crea un nuevo repositorio Git en la carpeta actual. | `git init` |
| `git config` | Configura tu nombre, correo o editor predeterminado. | `git config --global user.name "Diego Celis"` |
| `git config --list` | Muestra toda la configuraci√≥n actual. | `git config --list` |
| `git help <comando>` | Muestra la ayuda oficial del comando indicado. | `git help commit` |

---

## üìÇ **Estados y seguimiento**

| Comando | Descripci√≥n | Ejemplo |
|----------|--------------|---------|
| `git status` | Muestra el estado actual del repositorio (archivos modificados, pendientes, etc.). | `git status` |
| `git add <archivo>` | Agrega un archivo al √°rea de preparaci√≥n (*staging area*). | `git add index.html` |
| `git add .` | Agrega todos los cambios detectados. | `git add .` |
| `git rm <archivo>` | Elimina un archivo del repositorio. | `git rm viejo.txt` |
| `git mv <archivo>` | Renombra o mueve un archivo. | `git mv app.js src/app.js` |

---

## üß± **Commits y mensajes**

| Comando | Descripci√≥n | Ejemplo |
|----------|--------------|---------|
| `git commit -m "mensaje"` | Crea un commit con un mensaje corto. | `git commit -m "fix(api): corrige error en login"` |
| `git commit -am "mensaje"` | Agrega y commitea todos los cambios en seguimiento. | `git commit -am "feat(core): agrega validaci√≥n"` |
| `git log` | Muestra el historial de commits. | `git log --oneline` |
| `git show <id>` | Muestra los detalles de un commit espec√≠fico. | `git show a4c2f7e` |

---

## üåø **Ramas (branches)**

| Comando | Descripci√≥n | Ejemplo |
|----------|--------------|---------|
| `git branch` | Muestra todas las ramas locales. | `git branch` |
| `git branch <nombre>` | Crea una nueva rama. | `git branch dev` |
| `git checkout <rama>` | Cambia a una rama existente. | `git checkout main` |
| `git checkout -b <rama>` | Crea y cambia a una nueva rama. | `git checkout -b feature/login` |
| `git merge <rama>` | Fusiona los cambios de otra rama en la actual. | `git merge dev` |
| `git branch -d <rama>` | Elimina una rama local. | `git branch -d vieja` |

---

## üîÑ **Sincronizaci√≥n con repositorios remotos**

| Comando | Descripci√≥n | Ejemplo |
|----------|--------------|---------|
| `git remote -v` | Muestra los repositorios remotos configurados. | `git remote -v` |
| `git remote add origin <url>` | Conecta el repositorio local con uno remoto (GitHub, GitLab, etc.). | `git remote add origin https://github.com/CelisHD/proyecto.git` |
| `git push origin <rama>` | Sube tus commits al repositorio remoto. | `git push origin main` |
| `git pull origin <rama>` | Descarga y fusiona cambios del repositorio remoto. | `git pull origin main` |
| `git fetch` | Descarga cambios del remoto sin fusionarlos. | `git fetch` |
| `git clone <url>` | Clona un repositorio remoto. | `git clone https://github.com/CelisHD/proyecto.git` |

---

## üß≠ **Revisi√≥n y control**

| Comando | Descripci√≥n | Ejemplo |
|----------|--------------|---------|
| `git diff` | Muestra las diferencias entre archivos modificados y el √∫ltimo commit. | `git diff` |
| `git diff --staged` | Muestra las diferencias preparadas para commit. | `git diff --staged` |
| `git log --graph --oneline --decorate` | Visualiza la historia del proyecto con ramas. | `git log --graph --oneline --decorate` |
| `git blame <archivo>` | Muestra qui√©n modific√≥ cada l√≠nea de un archivo. | `git blame app.js` |
| `git show` | Muestra los cambios de un commit espec√≠fico. | `git show 5f2a3b1` |

---

## üîÅ **Deshacer cambios y restaurar versiones**

| Comando | Descripci√≥n | Ejemplo |
|----------|--------------|---------|
| `git restore <archivo>` | Restaura un archivo a su versi√≥n anterior. | `git restore main.py` |
| `git restore --staged <archivo>` | Quita un archivo del √°rea de preparaci√≥n. | `git restore --staged index.html` |
| `git reset <commit>` | Vuelve el proyecto a un commit anterior. | `git reset 1a2b3c` |
| `git revert <commit>` | Crea un commit nuevo que revierte los cambios de otro. | `git revert 5e6f7g8` |

---

## üßÆ **Alias √∫tiles (opcional)**

Puedes crear **atajos personalizados** para trabajar m√°s r√°pido:

```bash
git config --global alias.s status
git config --global alias.l "log --oneline --graph --decorate"
git config --global alias.c "commit -m"
